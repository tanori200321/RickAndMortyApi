@inject HttpClient Http
@using RickAndMortyApi.Models

<style>
    .character-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .character-card {
        border: 1px solid #ccc;
        border-radius: 15px;
        padding: 49px;
        max-width: 400px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #fff;
    }

        .character-card img {
            display: block;
            margin: 16px auto;
            max-width: 300px;
        }

    .status-circle {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        display: inline-block;
    }

    .active {
        background-color: green;
    }

    .inactive {
        background-color: red;
    }
</style>



<div class="character-overlay">
    <div class="character-card">
        @if (character == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @if (!string.IsNullOrEmpty(character.Image))
            {
                <img src="@character.Image" alt="@character.Name" />
            }
            <p><strong>Name:</strong> @character.Name</p>
            <p>
                <strong>Status:</strong>
                <span class="status-circle @(character.Status == "Alive" ? "active" : "inactive")"></span>
                @character.Status
            </p>
            <p><strong>Species:</strong> @character.Species</p>
            <p><strong>Gender:</strong> @character.Gender</p>
        }
    </div>
</div>

@code {
    private Character character;

    [Parameter]
    public int CharacterId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadCharacterAsync();
    }

    private async Task LoadCharacterAsync()
    {
        var response = await Http.GetAsync($"https://rickandmortyapi.com/api/character/{CharacterId}");

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            character = Newtonsoft.Json.JsonConvert.DeserializeObject<Character>(json);
        }
        else
        {
            character = null;
        }
    }
}
